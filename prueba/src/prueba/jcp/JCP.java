package jcp;



import java.awt.Component;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.LayoutManager;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;
import java.net.MalformedURLException;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.media.CaptureDeviceInfo;
import javax.media.Manager;
import javax.media.Player;
import javax.media.format.VideoFormat;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author FAMILIA MEZA MEZA
 */
public class JCP extends javax.swing.JFrame implements MouseListener{
private CaptureVideoPlayer PC;
private String Device="JavaSound audio capture";
private String Device2="vfw:Microsoft WDM Image Capture (Win32):0";
private JFileChooser Select=null; 
private Component PanelCam=null;
private File Home=new File("JCameraFiles");
private JPanel IPanel[]=null;
    private String Fecha="";
    private String Ano="";
    private String Mes="";
    private String Dia="";
    private String Hora="";
    private int aa,mm,dd;
    private File Imgs[]=null;
    private ImageIcon IIcons[]=null;
    private JLabel Foto[]=null;
    private int f=1;
    private Player play=null;
    
    /**
     * Creates new form JCP
     */
    public JCP() {
        
        this.init();
        this.setIconImage (new ImageIcon(getClass().getResource("Icon.png")).getImage());
        setLocationRelativeTo(null);
        this.setVisible(true);
        
    }
    
    
    
    private void init (){
        if(!Home.exists()){
            Home.mkdir();
        }
        
        int c=0;
        ImageFilter IF=new ImageFilter();
        for(int i=0; i<Home.listFiles().length; i++){
            if(IF.accept(Home.listFiles()[i]) ){
                c++;
            }
        }
        f=((int)c/5)+4;
        
        CaptureDeviceInfo cdv=new CaptureVideoPlayer().getDeviceInfo(Device2); 
        
        if(cdv==null){
            JOptionPane.showMessageDialog(null, "El Sistema no pudo detectar la Camara. \nDebe Reiniciar el Programa... \nNota: Compruebe que el archivo jmf.properties exista y se el adecuado...");
        //System.exit(0);
        }
        
        PC=new CaptureVideoPlayer(cdv);
        initComponents();
        LoadFilesFolder();
        PExplorer.setLayout(new GridLayout(f,5));
        
        PanelCam=PC.getVideoCamera();
        
        PanelCam.setSize(450,350);
        setFormat();
        PanelCamara.add(PanelCam);
        
        //PC.plays();
        
    }
    
    
    
    private void setFormat(){
        if(PC.getFormats().length>0){
       for(int i=0;i<PC.getFormats().length;i++){
           
           VideoFormat VF=(VideoFormat)PC.getFormats()[i];
           if(VF.getSize().getWidth()==320){
               PC.setFormat(i);
           }
           
       } 
       }else{
           
       }
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    
    public File getFileDialog(int op){
        GenFecha();
        File IMG=null;
        String imagen="";
        Select=new JFileChooser(Home);
        Select.setFileView(new ImageFileView());
        Select.setAccessory(new ImagePreview(Select));
        Select.setFileFilter(new ImageFilter());
        
        if(op==0){
        Select.setDialogTitle("Guardar Captura como...");
        Select.showSaveDialog(this);
        if(Select.getSelectedFile()!=null){
            imagen= Select.getSelectedFile().getAbsolutePath();
            if (imagen.lastIndexOf(".") > 0)
            imagen = imagen.substring(0,imagen.lastIndexOf("."));

            imagen = imagen+".JPG";
            IMG = new File(imagen);
        }
        }else{
            
            Select.setDialogTitle("Abrir Archivo...");
            Select.showOpenDialog(this);
            if(Select.getSelectedFile()!=null){
               IMG = Select.getSelectedFile();
            }
        }
        
        return IMG;
    }
    
    
    public void LoadFilesFolder(){
        PExplorer.removeAll();
        
        int c=0;
        ImageFilter IF=new ImageFilter();
        for(int i=0; i<Home.listFiles().length; i++){
            if(IF.accept(Home.listFiles()[i]) ){
                c++;
            }
        }
        
        
        Imgs=new File[c]; int k=0;
        for(int i=0; i<Home.listFiles().length; i++){
            if(IF.accept(Home.listFiles()[i]) ){
                Imgs[k]=new File(Home.listFiles()[i].getAbsolutePath());
                k++;
                
            }
        }
        
        
        if(Imgs!=null){
            IIcons=new ImageIcon[Imgs.length];
            ImageIcon thumbnail = null;
            Foto=new JLabel[c];
            IPanel=new JPanel[c];
            int p=5;
            for(int i=0; i<Imgs.length; i++){
                
                IIcons[i]=new ImageIcon(Imgs[i].getAbsolutePath());
                thumbnail = new ImageIcon(IIcons[i].getImage().
                                      getScaledInstance(120,120,
                                                        Image.SCALE_DEFAULT));
                IIcons[i]=thumbnail;
                IPanel[i]=new JPanel();
                Foto[i]=new JLabel();
                Foto[i].setIcon(thumbnail);
                Foto[i].setBounds(p,5,120,125);
                Foto[i].addMouseListener(this);
                p=p+130;
                PExplorer.add(Foto[i]);
                Foto[i].setToolTipText(Imgs[i].getName());
                
                
            }
            
        }
    }
    
    
    
    private boolean CPhoto(){
        Image ph=PC.capturePhoto();
        try {
            play=Manager.createPlayer(new File("flash.mp3").toURL());
        } catch (Exception ex) {
            System.err.println(ex);
        }
        play.start();
        PanelCamara.removeAll();
        ImageIcon i=new ImageIcon();
        i.setImage(ph);
        ImageIcon thumbnail = new ImageIcon(i.getImage().
                                      getScaledInstance(450,350,
                                                        Image.SCALE_DEFAULT));
        i=thumbnail;
        JLabel j=new JLabel();
        j.setIcon(i);
        j.setBounds(1,1,450,350);
        PanelCamara.add(j);
        if(PC.saveImageFile(ph,this.getFileDialog(0))==false){
            JOptionPane.showMessageDialog(this, "No se pudo guardar en el Archivo!...");
            return false;
        }
        PanelCamara.removeAll();
        LoadFilesFolder();
        play.stop();
        PanelCam.setBounds(1,1,450,350);
        PanelCamara.add(PanelCam);
        return true;
    }
    
    
    
    
    
    
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Explorer = new javax.swing.JScrollPane();
        PExplorer = new javax.swing.JPanel();
        PanelP = new javax.swing.JPanel();
        PanelCamara = new javax.swing.JPanel();
        CFoto = new javax.swing.JButton();
        CPantalla = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JCamera Plus");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);

        Explorer.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), "Explorador de Archivos", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        PExplorer.setToolTipText("Click en la Imagen para ver en tama√±o real.");
        PExplorer.setMaximumSize(new java.awt.Dimension(640, 3000));
        PExplorer.setPreferredSize(new java.awt.Dimension(640, f*175));
        PExplorer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PExplorerMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout PExplorerLayout = new javax.swing.GroupLayout(PExplorer);
        PExplorer.setLayout(PExplorerLayout);
        PExplorerLayout.setHorizontalGroup(
            PExplorerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 436, Short.MAX_VALUE)
        );
        PExplorerLayout.setVerticalGroup(
            PExplorerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 141, Short.MAX_VALUE)
        );

        Explorer.setViewportView(PExplorer);

        javax.swing.GroupLayout PanelPLayout = new javax.swing.GroupLayout(PanelP);
        PanelP.setLayout(PanelPLayout);
        PanelPLayout.setHorizontalGroup(
            PanelPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        PanelPLayout.setVerticalGroup(
            PanelPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 511, Short.MAX_VALUE)
        );

        PanelCamara.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        PanelCamara.setMaximumSize(new java.awt.Dimension(640, 480));
        PanelCamara.setMinimumSize(new java.awt.Dimension(50, 40));

        javax.swing.GroupLayout PanelCamaraLayout = new javax.swing.GroupLayout(PanelCamara);
        PanelCamara.setLayout(PanelCamaraLayout);
        PanelCamaraLayout.setHorizontalGroup(
            PanelCamaraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        PanelCamaraLayout.setVerticalGroup(
            PanelCamaraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 350, Short.MAX_VALUE)
        );

        CFoto.setText("Capturar Foto");
        CFoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CFotoActionPerformed(evt);
            }
        });

        CPantalla.setText("Capturar Pantalla");
        CPantalla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CPantallaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(CFoto)
                        .addGap(141, 141, 141)
                        .addComponent(CPantalla))
                    .addComponent(PanelCamara, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Explorer, javax.swing.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(PanelP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PanelP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(PanelCamara, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CFoto)
                            .addComponent(CPantalla))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Explorer, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CFotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CFotoActionPerformed
        this.CPhoto();
    }//GEN-LAST:event_CFotoActionPerformed

    private void PExplorerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PExplorerMouseClicked
        
        
    }//GEN-LAST:event_PExplorerMouseClicked

    private void CPantallaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CPantallaActionPerformed
        this.setVisible(false);
        new Capture().captureScreen();
        this.setVisible(true);
    }//GEN-LAST:event_CPantallaActionPerformed
    
    
    public void mouseClicked(java.awt.event.MouseEvent evt) {
        if(evt.getClickCount()==2){
        JLabel E=(JLabel)evt.getSource();
        for(int i=0;i<Foto.length;i++){
            if(E.equals(Foto[i])){
                ViewImageFrame VIF=new ViewImageFrame(this,true,Imgs[i].getAbsolutePath());
                VIF.setVisible(true);
            }    
        }
        }
    }
    
    
    public void GenFecha(){
        Calendar Hoy = Calendar.getInstance();
        aa=Hoy.get(Calendar.YEAR);
        mm=Hoy.get(Calendar.MONTH)+1;
        dd=Hoy.get(Calendar.DATE);
        Ano=""+aa;
        Mes=""+mm;
        Dia=""+dd;
        Hora=""+Hoy.get(Calendar.HOUR)+"-"+Hoy.get(Calendar.MINUTE)+"-"+Hoy.get(Calendar.SECOND);


        if(mm<10){
            Mes="0"+mm;
        }

        if(dd<10){
            Dia="0"+dd;
        }
        
        if(mm==1){
           Mes="Enero";
           
        }

        if(mm==2){
           Mes="Febrero";
           
        }

        if(mm==3){
           Mes="Marzo";
           
        }

        if(mm==4){
           Mes="Abril";
           
        }

        if(mm==5){
           Mes="Mayo";
           
        }

        if(mm==6){
           Mes="Junio";
           
        }

        if(mm==7){
           Mes="Julio";
           
        }

        if(mm==8){
           Mes="Agosto";
           
        }

        if(mm==9){
           Mes="Septiembre";
           
        }

        if(mm==10){
           Mes="Octubre";
           
        }

        if(mm==11){
           Mes="Noviembre";
           
        }


        if(mm==12){
           Mes="Diciembre";
           
        }
        
        Fecha=Dia+"de"+Mes+"de"+Ano+Hoy.getTime().getHours()+"_"+Ano+Hoy.getTime().getMinutes()+"_"+Ano+Hoy.getTime().getSeconds();



    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JCP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JCP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JCP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JCP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JCP().setVisible(true);
            }
        });
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CFoto;
    private javax.swing.JButton CPantalla;
    private javax.swing.JScrollPane Explorer;
    private javax.swing.JPanel PExplorer;
    private javax.swing.JPanel PanelCamara;
    private javax.swing.JPanel PanelP;
    // End of variables declaration//GEN-END:variables

    @Override
    public void mousePressed(MouseEvent e) {
        
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        
    }

    @Override
    public void mouseEntered(MouseEvent e) {
           
    }

    @Override
    public void mouseExited(MouseEvent e) {
        
    }

    
}
